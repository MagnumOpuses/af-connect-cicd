kind: BuildConfig
apiVersion: build.openshift.io/v1
metadata:
  name: master-builder-t2
spec:
  triggers: []
  nodeSelector: {}
  output: {}
  resources: {}
  successfulBuildsHistoryLimit: 5
  failedBuildsHistoryLimit: 5
  strategy:
    type: JenkinsPipeline
    jenkinsPipelineStrategy:
      jenkinsfile: |-
        def artifacts = [
          'af-connect', 'af-portability', 'af-connect-outbox'
        ]

        pipeline {
          agent {
            kubernetes {
              label 'promotion-agent'
              cloud 'openshift'
              serviceAccount 'jenkins'
              containerTemplate {
                name 'jnlp'
                image "image-registry.openshift-image-registry.svc:5000/${NAMESPACE}/skopeo:latest"
                alwaysPullImage true
                workingDir '/tmp'
                args '${computer.jnlpmac} ${computer.name}'
                command ''
                ttyEnabled false
              }
            }
          }
          environment {
            buildTag = "${BUILD_NUMBER}"
          }
          stages {
            // Creating AF-Connect application
            stage("Create af-connect application") {
              when {
                expression {
                  openshift.withCluster() {
                    openshift.withProject("af-connect-cicd") {
                      return !openshift.selector("bc", "af-connect").exists();
                    }
                  }
                }
              }
              steps {
                script {
                  openshift.withCluster() {
                    openshift.withProject("af-connect-cicd") {
                      openshift.newApp("--template=af-connect")
                    }
                  }
                }
              }
            }
            // Creating AF-Connect-Outbox application
            stage("Create af-connect-Outbox application") {
              when {
                expression {
                  openshift.withCluster() {
                    openshift.withProject("af-connect-cicd") {
                      return !openshift.selector("bc", "af-connect-outbox").exists();
                    }
                  }
                }
              }
              steps {
                script {
                  openshift.withCluster() {
                    openshift.withProject("af-connect-cicd") {
                      openshift.newApp("--template=af-connect-outbox")
                    }
                  }
                }
              }
            }
            // Creating AF-Portability application
            stage("Create af-portability application") {
              when {
                expression {
                  openshift.withCluster() {
                    openshift.withProject("af-connect-cicd") {
                      return !openshift.selector("bc", "af-portability").exists();
                    }
                  }
                }
              }
              steps {
                script {
                  openshift.withCluster() {
                    openshift.withProject("af-connect-cicd") {
                      openshift.newApp("--template=af-portability")
                    }
                  }
                }
              }
            }
            
            stage('Change Source Ref to Master') {
              steps {
                script {
                  openshift.withCluster() {
                    artifacts.each { artifact -> 
                      def p = openshift.selector("bc/${artifact}").object()
                      p.spec.source.git.ref = 'master'
                      openshift.apply(p)
                    }
                    
                  }
                }
              }
            }

            stage('Build Image') {
              steps {
                script {
                  openshift.withCluster() {
                    openshift.withProject("af-connect-cicd") {
                      artifacts.each { artifact -> 
                        openshift.selector("bc", "${artifact}").startBuild("--wait=true")
                      }
                    }
                  }
                }
              }
            }
            stage("Tag Image") {
              steps {
                script {
                  openshift.withCluster() {
                    openshift.withProject("af-connect-cicd") {
                      echo "${env.IMAGE_TAG}"
                      artifacts.each { artifact -> 
                        openshift.tag("${artifact}:latest", "${artifact}:pre-release-${env.IMAGE_TAG}")
                      }
                    }
                  }
                }
              }
            }
            
            stage('Push Image'){
              steps {
                container('jnlp') {
                  sh "echo 'pushing images'"
                  sh """skopeo --debug copy --src-tls-verify=false --dest-tls-verify=false \
                  --src-creds=skopeo:${SCRED} --dest-creds=skopeo:${DCRED} \
                  docker://${AF_CONNECT_SOURCE_IMAGE_REPO}:pre-release-${env.IMAGE_TAG} docker://${AF_CONNECT_DEST_IMAGE_REPO}:pre-release-${env.IMAGE_TAG}
                  """
                  sh """skopeo --debug copy --src-tls-verify=false --dest-tls-verify=false \
                  --src-creds=skopeo:${SCRED} --dest-creds=skopeo:${DCRED} \
                  docker://${AF_CONNECT_OUTBOX_SOURCE_IMAGE_REPO}:pre-release-${env.IMAGE_TAG} docker://${AF_CONNECT_OUTBOX_DEST_IMAGE_REPO}:pre-release-${env.IMAGE_TAG}
                  """
                  sh """skopeo --debug copy --src-tls-verify=false --dest-tls-verify=false \
                  --src-creds=skopeo:${SCRED} --dest-creds=skopeo:${DCRED} \
                  docker://${AF_PORTABILITY_SOURCE_IMAGE_REPO}:pre-release-${env.IMAGE_TAG} docker://${AF_PORTABILITY_DEST_IMAGE_REPO}:pre-release-${env.IMAGE_TAG}
                  """          
                }
              }
            }

          }
        }
      env:
        - name: IMAGE_TAG
          value: ""
        - name: NAMESPACE
          value: "af-connect-cicd"

        - name: SCRED
          value: >-
            
        - name: DCRED
          value: >-
            
        - name: AF_CONNECT_SOURCE_IMAGE_REPO
          value: "default-route-openshift-image-registry.test.services.jtech.se/af-connect-cicd/af-connect"

        - name: AF_CONNECT_DEST_IMAGE_REPO
          value: "docker-registry-default.opservices.jtech.se/gravity-t2/af-connect"

        - name: AF_CONNECT_OUTBOX_SOURCE_IMAGE_REPO
          value: "default-route-openshift-image-registry.test.services.jtech.se/af-connect-cicd/af-connect-outbox"

        - name: AF_CONNECT_OUTBOX_DEST_IMAGE_REPO
          value: "docker-registry-default.opservices.jtech.se/gravity-t2/af-connect-outbox"

        - name: AF_PORTABILITY_SOURCE_IMAGE_REPO
          value: "default-route-openshift-image-registry.test.services.jtech.se/af-connect-cicd/af-portability"

        - name: AF_PORTABILITY_DEST_IMAGE_REPO
          value: "docker-registry-default.opservices.jtech.se/gravity-t2/af-portability"

  runPolicy: Serial
